name: API Deploy

on:
  push:
    branches:
      - main
      - staging
    paths:
      - 'packages/api/**'
      - 'packages/database/**'
      - 'packages/services/**'
      - 'packages/shared/**'
      - '.github/workflows/api-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: vici_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint:api
      
      - name: Run tests
        run: npm run test:api
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vici_test
          JWT_SECRET: test_jwt_secret
          NODE_ENV: test

  build-and-deploy-staging:
    name: Build and Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/staging' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build API package
        run: npm run build:api
      
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: vici-api
          IMAGE_TAG: staging-${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:staging -f packages/api/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:staging
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.9
      
      - name: Terraform Init
        working-directory: packages/api/infrastructure/terraform/staging
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init
      
      - name: Terraform Plan
        working-directory: packages/api/infrastructure/terraform/staging
        env:
          TF_VAR_db_username: ${{ secrets.TF_VAR_DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
          TF_VAR_jwt_secret: ${{ secrets.TF_VAR_JWT_SECRET }}
          TF_VAR_gemini_api_key: ${{ secrets.TF_VAR_GEMINI_API_KEY }}
          TF_VAR_strava_client_id: ${{ secrets.TF_VAR_STRAVA_CLIENT_ID }}
          TF_VAR_strava_client_secret: ${{ secrets.TF_VAR_STRAVA_CLIENT_SECRET }}
          TF_VAR_strava_webhook_verify_token: ${{ secrets.TF_VAR_STRAVA_WEBHOOK_VERIFY_TOKEN }}
          TF_VAR_ecr_repository_url: ${{ steps.login-ecr.outputs.registry }}/vici-api
          TF_VAR_acm_certificate_arn: ${{ secrets.TF_VAR_ACM_CERTIFICATE_ARN }}
          TF_VAR_route53_zone_id: ${{ secrets.TF_VAR_ROUTE53_ZONE_ID }}
          TF_VAR_sns_alarm_topic_arn: ${{ secrets.TF_VAR_SNS_ALARM_TOPIC_ARN }}
        run: terraform plan -out=tfplan
      
      - name: Terraform Apply
        working-directory: packages/api/infrastructure/terraform/staging
        env:
          TF_VAR_db_username: ${{ secrets.TF_VAR_DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
          TF_VAR_jwt_secret: ${{ secrets.TF_VAR_JWT_SECRET }}
          TF_VAR_gemini_api_key: ${{ secrets.TF_VAR_GEMINI_API_KEY }}
          TF_VAR_strava_client_id: ${{ secrets.TF_VAR_STRAVA_CLIENT_ID }}
          TF_VAR_strava_client_secret: ${{ secrets.TF_VAR_STRAVA_CLIENT_SECRET }}
          TF_VAR_strava_webhook_verify_token: ${{ secrets.TF_VAR_STRAVA_WEBHOOK_VERIFY_TOKEN }}
          TF_VAR_ecr_repository_url: ${{ steps.login-ecr.outputs.registry }}/vici-api
          TF_VAR_acm_certificate_arn: ${{ secrets.TF_VAR_ACM_CERTIFICATE_ARN }}
          TF_VAR_route53_zone_id: ${{ secrets.TF_VAR_ROUTE53_ZONE_ID }}
          TF_VAR_sns_alarm_topic_arn: ${{ secrets.TF_VAR_SNS_ALARM_TOPIC_ARN }}
        run: terraform apply -auto-approve tfplan
      
      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: |
          cd packages/database
          npx prisma migrate deploy
      
      - name: Create deployment notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "API deployment to staging completed successfully!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*API deployment to staging completed successfully!*\n\nCommit: <${{ github.event.repository.html_url }}/commit/${{ github.sha }}|${{ github.sha }}>\nBy: ${{ github.actor }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  build-and-deploy-production:
    name: Build and Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    
    environment:
      name: production
      url: https://api.vici.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build API package
        run: npm run build:api
      
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: vici-api
          IMAGE_TAG: production-${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:production -f packages/api/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:production
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.9
      
      - name: Terraform Init
        working-directory: packages/api/infrastructure/terraform/production
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init
      
      - name: Terraform Plan
        working-directory: packages/api/infrastructure/terraform/production
        env:
          TF_VAR_db_username: ${{ secrets.TF_VAR_DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
          TF_VAR_jwt_secret: ${{ secrets.TF_VAR_JWT_SECRET }}
          TF_VAR_gemini_api_key: ${{ secrets.TF_VAR_GEMINI_API_KEY }}
          TF_VAR_strava_client_id: ${{ secrets.TF_VAR_STRAVA_CLIENT_ID }}
          TF_VAR_strava_client_secret: ${{ secrets.TF_VAR_STRAVA_CLIENT_SECRET }}
          TF_VAR_strava_webhook_verify_token: ${{ secrets.TF_VAR_STRAVA_WEBHOOK_VERIFY_TOKEN }}
          TF_VAR_ecr_repository_url: ${{ steps.login-ecr.outputs.registry }}/vici-api
          TF_VAR_acm_certificate_arn: ${{ secrets.TF_VAR_ACM_CERTIFICATE_ARN }}
          TF_VAR_route53_zone_id: ${{ secrets.TF_VAR_ROUTE53_ZONE_ID }}
          TF_VAR_sns_alarm_topic_arn: ${{ secrets.TF_VAR_SNS_ALARM_TOPIC_ARN }}
        run: terraform plan -out=tfplan
      
      - name: Terraform Apply
        working-directory: packages/api/infrastructure/terraform/production
        env:
          TF_VAR_db_username: ${{ secrets.TF_VAR_DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
          TF_VAR_jwt_secret: ${{ secrets.TF_VAR_JWT_SECRET }}
          TF_VAR_gemini_api_key: ${{ secrets.TF_VAR_GEMINI_API_KEY }}
          TF_VAR_strava_client_id: ${{ secrets.TF_VAR_STRAVA_CLIENT_ID }}
          TF_VAR_strava_client_secret: ${{ secrets.TF_VAR_STRAVA_CLIENT_SECRET }}
          TF_VAR_strava_webhook_verify_token: ${{ secrets.TF_VAR_STRAVA_WEBHOOK_VERIFY_TOKEN }}
          TF_VAR_ecr_repository_url: ${{ steps.login-ecr.outputs.registry }}/vici-api
          TF_VAR_acm_certificate_arn: ${{ secrets.TF_VAR_ACM_CERTIFICATE_ARN }}
          TF_VAR_route53_zone_id: ${{ secrets.TF_VAR_ROUTE53_ZONE_ID }}
          TF_VAR_sns_alarm_topic_arn: ${{ secrets.TF_VAR_SNS_ALARM_TOPIC_ARN }}
        run: terraform apply -auto-approve tfplan
      
      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          cd packages/database
          npx prisma migrate deploy
      
      - name: Create deployment notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "API deployment to production completed successfully!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*API deployment to production completed successfully!*\n\nCommit: <${{ github.event.repository.html_url }}/commit/${{ github.sha }}|${{ github.sha }}>\nBy: ${{ github.actor }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK 