# Setting up the ViciApp Xcode Project

Follow these steps to create the Xcode project for the Vici native iOS app:

## Step 1: Create a New Xcode Project

1. Open Xcode
2. Click "Create a new Xcode project" or File > New > Project
3. Select "iOS" tab at the top
4. Choose "App" template
5. Click "Next"
6. Enter the following details:
   - Product Name: ViciApp
   - Organization Identifier: com.yourcompany.vici (replace with your actual identifier)
   - Interface: SwiftUI
   - Language: Swift
   - Storage: None
   - Life Cycle: SwiftUI App
   - Make sure "Use Core Data" is unchecked
7. Click "Next"
8. Choose this directory (`/Users/chrisdunn/Documents/GitHub/Vici-App/packages/vici-native/ios`) as the save location
9. Click "Create"

## Step 2: Import the Existing Swift Files

1. In Xcode's Project Navigator, right-click on the ViciApp project
2. Select "Add Files to 'ViciApp'..."
3. Navigate to and select the following files:
   - MockData.swift
   - ViciApp.swift
4. Make sure "Copy items if needed" is checked
5. Click "Add"

## Step 3: Set up App Icon and Launch Screen

1. In the Project Navigator, select the "Assets.xcassets" file
2. Right-click in the asset catalog and select "New App Icon"
3. Use a placeholder icon for now, or create a simple icon with SF Symbols

## Step 4: Run the App

1. Select a simulator target (e.g., iPhone 14)
2. Click the "Run" button (play icon) or press âŒ˜R
3. The app should build and run, displaying the login screen

## Troubleshooting

If you encounter any build issues:

1. Check that Swift Language Version is set to Swift 5 or later:
   - Select the project in the Project Navigator
   - Select the "ViciApp" target
   - Go to "Build Settings" tab
   - Search for "Swift Language Version"
   - Make sure it's set to "Swift 5" or later

2. If you see warnings about SF Symbols availability:
   - Set the Deployment Target to iOS 15.0 or later

## Next Steps

After successfully running the app, you can:

1. Customize the UI to match your brand guidelines
2. Connect to real API endpoints when they become available
3. Add more features as required by the MVP

The provided Swift files contain all the basic functionality needed for the MVP, implemented as a self-contained system with mock data. 